/* parser generated by jison 0.4.15 */
/*
 Returns a Parser object of the following structure:

 Parser: {
 yy: {}
 }

 Parser.prototype: {
 yy: {},
 trace: function(),
 symbols_: {associative list: name ==> number},
 terminals_: {associative list: number ==> name},
 productions_: [...],
 performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
 table: [...],
 defaultActions: {...},
 parseError: function(str, hash),
 parse: function(input),

 lexer: {
 EOF: 1,
 parseError: function(str, hash),
 setInput: function(input),
 input: function(),
 unput: function(str),
 more: function(),
 less: function(n),
 pastInput: function(),
 upcomingInput: function(),
 showPosition: function(),
 test_match: function(regex_match_array, rule_index),
 next: function(),
 lex: function(),
 begin: function(condition),
 popState: function(),
 _currentRules: function(),
 topState: function(),
 pushState: function(condition),

 options: {
 ranges: boolean           (optional: true ==> token location info will include a .range[] member)
 flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
 backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
 },

 performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
 rules: [...],
 conditions: {associative list: name ==> set},
 }
 }


 token location info (@$, _$, etc.): {
 first_line: n,
 last_line: n,
 first_column: n,
 last_column: n,
 range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
 }


 the parseError function receives a 'hash' object with these members for lexer and parser errors: {
 text:        (matched text)
 token:       (the produced terminal token, if any)
 line:        (yylineno)
 }
 while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
 loc:         (yylloc)
 expected:    (string describing the set of expected tokens)
 recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
 }
 */

var GetterHelper = function (object, path) {
    path = path.toString();
    var self = object, field = path.split('.'), val, key;
    if (field.length) {
        key = field[0];
        //lists[1].name
        if (key.indexOf('[') >= 0) {
            key = key.match(/(.*)\[(.*)\]/);
            if (key) {
                val = object[key[1]][key[2]];
            }
        } else {
            val = object[field[0]];
        }
        if (val) {
            for (var i = 1; i < field.length; i++) {
                val = val[field[i]];
                if (typeof val === 'undefined') {
                    break;
                }
            }
        }
    }
    return val;
};

var SetterHelper = function (model, path, value) {
    if(model.set){
        model.set(path, value);
    }
}
var Filters = {};

if (typeof Object.create != 'function') {
    Object.create = (function() {
        function Temp() {}
        var hasOwn = Object.prototype.hasOwnProperty;
        return function (O) {
            if (typeof O != 'object') {
                throw TypeError('Object prototype may only be an Object or null');
            }

            Temp.prototype = O;
            var obj = new Temp();
            Temp.prototype = null;

            if (arguments.length > 1) {
                var Properties = Object(arguments[1]);
                for (var prop in Properties) {
                    if (hasOwn.call(Properties, prop)) {
                        obj[prop] = Properties[prop];
                    }
                }
            }
            return obj;
        };
    })();
}

var parser = (function () {
    var o = function (k, v, o, l) {
        for (o = o || {}, l = k.length; l--; o[k[l]] = v);
        return o
    }, $V0 = [1, 5], $V1 = [1, 9], $V2 = [1, 10], $V3 = [1, 11], $V4 = [1, 12], $V5 = [1, 13], $V6 = [1, 14], $V7 = [1, 18], $V8 = [1, 19], $V9 = [1, 20], $Va = [1, 21], $Vb = [1, 22], $Vc = [1, 23], $Vd = [1, 24], $Ve = [1, 25], $Vf = [1, 26], $Vg = [1, 27], $Vh = [1, 28], $Vi = [1, 29], $Vj = [1, 30], $Vk = [1, 31], $Vl = [1, 32], $Vm = [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27], $Vn = [2, 29], $Vo = [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 42], $Vp = [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 31, 42], $Vq = [5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31, 42], $Vr = [1, 57], $Vs = [1, 62], $Vt = [5, 8, 11, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27], $Vu = [5, 8, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27], $Vv = [5, 8, 23, 24, 27], $Vw = [5, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 31];
    var parser = {trace: function trace() {
    },
        yy: {},
        symbols_: {"error": 2, "expressions": 3, "program": 4, "EOF": 5, "NOT": 6, "e": 7, "?": 8, "type": 9, ":": 10, "+": 11, "-": 12, "*": 13, "/": 14, ">": 15, "<": 16, "==": 17, ">=": 18, "<=": 19, "!=": 20, "!==": 21, "===": 22, "||": 23, "&&": 24, "in": 25, "LEFT": 26, "RIGHT": 27, "key": 28, "identity": 29, "=": 30, "|": 31, "filters": 32, "KEY": 33, "DOT": 34, "params": 35, "TRUE": 36, "FALSE": 37, "NUMBER": 38, "ARRAY": 39, "STRING": 40, "param": 41, ",": 42, "OBJECT": 43, "filter": 44, "~": 45, "$accept": 0, "$end": 1},
        terminals_: {2: "error", 5: "EOF", 6: "NOT", 8: "?", 10: ":", 11: "+", 12: "-", 13: "*", 14: "/", 15: ">", 16: "<", 17: "==", 18: ">=", 19: "<=", 20: "!=", 21: "!==", 22: "===", 23: "||", 24: "&&", 25: "in", 26: "LEFT", 27: "RIGHT", 30: "=", 31: "|", 33: "KEY", 34: "DOT", 36: "TRUE", 37: "FALSE", 38: "NUMBER", 39: "ARRAY", 40: "STRING", 42: ",", 43: "OBJECT", 45: "~"},
        productions_: [0, [3, 2], [4, 2], [4, 1], [4, 5], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 3], [7, 1], [7, 3], [7, 3], [29, 1], [29, 3], [29, 5], [29, 4], [29, 6], [28, 1], [28, 1], [9, 1], [9, 1], [9, 1], [9, 1], [9, 1], [35, 1], [35, 3], [41, 1], [41, 1], [32, 1], [32, 3], [44, 1], [44, 3]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return $$[$0 - 1];
                    break;
                case 2:
                    if (typeof $$[$0] == 'function') {
                        $$[$0] = $$[$0].call(yy.parser.__currentObject)
                    }
                    this.$ = !$$[$0];
                    break;
                case 3:
                case 21:
                case 40:
                    this.$ = $$[$0];
                    break;
                case 4:
                    if ($$[$0 - 4]) {
                        this.$ = $$[$0 - 2]
                    } else {
                        this.$ = $$[$0]
                    }
                    break;
                case 5:
                    this.$ = $$[$0 - 2] + $$[$0];
                    break;
                case 6:
                    this.$ = $$[$0 - 2] - $$[$0];
                    break;
                case 7:
                    this.$ = $$[$0 - 2] * $$[$0];
                    break;
                case 8:
                    this.$ = $$[$0 - 2] / $$[$0];
                    break;
                case 9:
                    this.$ = $$[$0 - 2] > $$[$0];
                    break;
                case 10:
                    this.$ = $$[$0 - 2] < $$[$0];
                    break;
                case 11:
                    this.$ = $$[$0 - 2] == $$[$0];
                    break;
                case 12:
                    this.$ = $$[$0 - 2] >= $$[$0];
                    break;
                case 13:
                    this.$ = $$[$0 - 2] <= $$[$0];
                    break;
                case 14:
                    this.$ = $$[$0 - 2] != $$[$0];
                    break;
                case 15:
                    this.$ = $$[$0 - 2] !== $$[$0];
                    break;
                case 16:
                    this.$ = $$[$0 - 2] === $$[$0];
                    break;
                case 17:
                    this.$ = $$[$0 - 2] || $$[$0];
                    break;
                case 18:
                    this.$ = $$[$0 - 2] && $$[$0];
                    break;
                case 19:
                    if(!$$[$0]){
                        $$[$0] = [];
                    }
                    this.$ = $$[$0].indexOf($$[$0 - 2]) > -1;
                    break;
                case 20:
                    this.$ = $$[$0 - 1];
                    break;
                case 22:
                    this.$ = function () {
                        return SetterHelper(yy.parser.__currentObject, yy.parser.__path, $$[$0])
                    };
                    break;
                case 23:
                    var filter = function (a, b) {
                        var args = [];
                        if (b.__args) {
                            b.__args.unshift(a);
                            args = b.__args;
                        } else {
                            args.unshift(a)
                        }
                        return b.apply(b, args);
                    };
                    if (!($$[$0] instanceof Array)) {
                        $$[$0] = [$$[$0]];
                    }
                    var value = $$[$0 - 2];
                    $$[$0].forEach(function (item) {
                        value = filter(value, item);
                    });
                    this.$ = value;
                    break;
                case 24:
                    this.$ = GetterHelper(yy.parser.__currentObject, $$[$0]);
                    yy.parser.__path = $$[$0];
                    break;
                case 25:
                    this.$ = GetterHelper(yy.parser.__currentObject, $$[$0 - 2]);
                    if (typeof this.$ == 'function') {
                        var res = this.$;
                        this.$ = function () {
                            var args = Array.prototype.slice.call(arguments, 0);
                            return res.apply(yy.parser.__currentObject._contextModel, args.concat($$[$0]));
                        };
                    }
                    yy.parser.__path = $$[$0 - 2];
                    break;
                case 26:
                    this.$ = GetterHelper(yy.parser.__currentObject, $$[$0 - 4]);
                    if (typeof this.$ == 'function') {
                        this.$ = this.$.call(yy.parser.__currentObject);
                    }
                    this.$ = this.$[$$[$0]];
                    yy.parser.__path = $$[$0 - 4];
                    break;
                case 27:
                    this.$ = GetterHelper(yy.parser.__currentObject, $$[$0 - 3]);
                    if (typeof this.$ == 'function') {
                        var res = this.$;
                        this.$ = function () {
                            var args = Array.prototype.slice.call(arguments, 0);
                            return res.apply(yy.parser.__currentObject._contextModel, args.concat($$[$0 - 1]));
                        };
                    }
                    yy.parser.__path = $$[$0 - 3];
                    break;
                case 28:
                    this.$ = GetterHelper(yy.parser.__currentObject, $$[$0 - 5]);
                    if (typeof this.$ == 'function') {
                        this.$ = this.$.apply(yy.parser.__currentObject, $$[$0 - 3]);
                    }
                    this.$ = this.$[$$[$0]];
                    yy.parser.__path = $$[$0 - 5];
                    break;
                case 29:
                    if (typeof $$[$0] == 'function') {
                        $$[$0] = $$[$0].bind(yy.parser.__currentObject)
                    }
                    this.$ = $$[$0];
                    break;
                case 30:
                case 38:
                    this.$ = $$[$0]
                    break;
                case 31:
                    this.$ = true
                    break;
                case 32:
                    this.$ = false
                    break;
                case 33:
                    this.$ = Number(yytext)
                    break;
                case 34:
                case 39:
                    var obj = (new Function('return ' + $$[$0]))();
                    this.$ = obj;
                    break;
                case 35:
                    this.$ = yytext.replace(/(['"])([\w-\s\$_]*)\1/, function (all, quote, str) {
                        return str;
                    });
                    break;
                case 36:
                    this.$ = [$$[$0]];
                    break;
                case 37:
                    var args = [];
                    if ($$[$0] instanceof Array) {
                        $$[$0].unshift($$[$0 - 2][0]);
                        args = $$[$0];
                    } else {
                        args.push($$[$0 - 2], $$[$0])
                    }
                    this.$ = args;
                    break;
                case 41:
                    var args = [];
                    if ($$[$0] instanceof Array) {
                        $$[$0].unshift($$[$0 - 2]);
                        args = $$[$0];
                    } else {
                        args.push($$[$0 - 2], $$[$0])
                    }
                    this.$ = args;
                    break;
                case 42:
                    this.$ = Filters[$$[$0]];
                    break;
                case 43:
                    this.$ = Filters[$$[$0 - 2]];
                    Filters[$$[$0 - 2]].__args = $$[$0];
                    break;
            }
        },
        table: [
            {3: 1, 4: 2, 6: [1, 3], 7: 4, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {1: [3]},
            {5: [1, 15]},
            {7: 16, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {5: [2, 3], 8: [1, 17], 11: $V7, 12: $V8, 13: $V9, 14: $Va, 15: $Vb, 16: $Vc, 17: $Vd, 18: $Ve, 19: $Vf, 20: $Vg, 21: $Vh, 22: $Vi, 23: $Vj, 24: $Vk, 25: $Vl},
            {7: 33, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            o($Vm, [2, 21]),
            o($Vm, $Vn, {30: [1, 34], 31: [1, 35]}),
            o($Vo, [2, 30]),
            o($Vp, [2, 24], {26: [1, 36]}),
            o($Vq, [2, 31]),
            o($Vq, [2, 32]),
            o($Vq, [2, 33]),
            o($Vq, [2, 34]),
            o($Vq, [2, 35]),
            {1: [2, 1]},
            {5: [2, 2], 11: $V7, 12: $V8, 13: $V9, 14: $Va, 15: $Vb, 16: $Vc, 17: $Vd, 18: $Ve, 19: $Vf, 20: $Vg, 21: $Vh, 22: $Vi, 23: $Vj, 24: $Vk, 25: $Vl},
            {9: 37, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 38, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 39, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 40, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 41, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 42, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 43, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 44, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 45, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 46, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 47, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 48, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 49, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 50, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 51, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {7: 52, 9: 8, 26: $V0, 28: 6, 29: 7, 33: $V1, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {11: $V7, 12: $V8, 13: $V9, 14: $Va, 15: $Vb, 16: $Vc, 17: $Vd, 18: $Ve, 19: $Vf, 20: $Vg, 21: $Vh, 22: $Vi, 23: $Vj, 24: $Vk, 25: $Vl, 27: [1, 53]},
            {9: 54, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {32: 55, 33: $Vr, 44: 56},
            {9: 8, 27: [1, 58], 28: 61, 29: 63, 33: $V1, 35: 59, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6, 41: 60, 43: $Vs},
            {10: [1, 64]},
            o($Vt, [2, 5], {13: $V9, 14: $Va}),
            o($Vt, [2, 6], {13: $V9, 14: $Va}),
            o($Vm, [2, 7]),
            o($Vm, [2, 8]),
            o($Vu, [2, 9], {11: $V7, 12: $V8, 13: $V9, 14: $Va}),
            o($Vu, [2, 10], {11: $V7, 12: $V8, 13: $V9, 14: $Va}),
            o($Vu, [2, 11], {11: $V7, 12: $V8, 13: $V9, 14: $Va}),
            o($Vu, [2, 12], {11: $V7, 12: $V8, 13: $V9, 14: $Va}),
            o($Vu, [2, 13], {11: $V7, 12: $V8, 13: $V9, 14: $Va}),
            o($Vu, [2, 14], {11: $V7, 12: $V8, 13: $V9, 14: $Va}),
            o($Vu, [2, 15], {11: $V7, 12: $V8, 13: $V9, 14: $Va}),
            o($Vu, [2, 16], {11: $V7, 12: $V8, 13: $V9, 14: $Va}),
            o($Vv, [2, 17], {11: $V7, 12: $V8, 13: $V9, 14: $Va, 15: $Vb, 16: $Vc, 17: $Vd, 18: $Ve, 19: $Vf, 20: $Vg, 21: $Vh, 22: $Vi, 25: $Vl}),
            o($Vv, [2, 18], {11: $V7, 12: $V8, 13: $V9, 14: $Va, 15: $Vb, 16: $Vc, 17: $Vd, 18: $Ve, 19: $Vf, 20: $Vg, 21: $Vh, 22: $Vi, 25: $Vl}),
            o($Vu, [2, 19], {11: $V7, 12: $V8, 13: $V9, 14: $Va}),
            o($Vm, [2, 20]),
            o($Vm, [2, 22]),
            o($Vm, [2, 23]),
            o($Vm, [2, 40], {31: [1, 65]}),
            o($Vw, [2, 42], {45: [1, 66]}),
            o($Vp, [2, 25], {34: [1, 67]}),
            {27: [1, 68]},
            o($Vw, [2, 36], {42: [1, 69]}),
            o($Vo, [2, 38]),
            o($Vo, [2, 39]),
            o($Vo, $Vn),
            {9: 70, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6},
            {32: 71, 33: $Vr, 44: 56},
            {9: 8, 28: 61, 29: 63, 33: $V1, 35: 72, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6, 41: 60, 43: $Vs},
            {33: [1, 73]},
            o($Vp, [2, 27], {34: [1, 74]}),
            {9: 8, 28: 61, 29: 63, 33: $V1, 35: 75, 36: $V2, 37: $V3, 38: $V4, 39: $V5, 40: $V6, 41: 60, 43: $Vs},
            {5: [2, 4]},
            o($Vm, [2, 41]),
            o($Vw, [2, 43]),
            o($Vp, [2, 26]),
            {33: [1, 76]},
            o($Vw, [2, 37]),
            o($Vp, [2, 28])
        ],
        defaultActions: {15: [2, 1], 70: [2, 4]},
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                throw new Error(str);
            }
        },

        getPath: function () {
            return this.__path;
        },

        parse: function parse(input, object) {
            var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            this.__currentObject = object;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }

            _token_stack:
                function lex() {
                    var token;
                    token = lexer.lex() || EOF;
                    if (typeof token !== 'number') {
                        token = self.symbols_[token] || token;
                    }
                    return token;
                }
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }};
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

// resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

// consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

// unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                        + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

// When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });

                }
                return this;
            },

// retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },

// displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

// displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

// displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

// test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token,
                    lines,
                    backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

// return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token,
                    match,
                    tempMatch,
                    index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

// return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

// pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

// produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

// alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

// return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:/* skip whitespace */
                        break;
                    case 1:
                        return 25
                        break;
                    case 2:
                        return 36
                        break;
                    case 3:
                        return 37
                        break;
                    case 4:
                        return 40
                        break;
                    case 5:
                        return 33
                        break;
                    case 6:
                        return 39
                        break;
                    case 7:
                        return 43
                        break;
                    case 8:
                        return 38
                        break;
                    case 9:
                        return 22
                        break;
                    case 10:
                        return 21
                        break;
                    case 11:
                        return 26
                        break;
                    case 12:
                        return 27
                        break;
                    case 13:
                        return 34
                        break;
                    case 14:
                        return 42
                        break;
                    case 15:
                        return yy_.yytext
                        break;
                    case 16:
                        return yy_.yytext
                        break;
                    case 17:
                        return 6
                        break;
                    case 18:
                        return 5
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:in)/, /^(?:true)/, /^(?:false)/, /^(?:(['"])[\w-\s\$_]*\1)/, /^(?:(?!['"\d])[\w\$'"][\w\.\[\]\$'"]*)/, /^(?:\[.*\])/, /^(?:\{.*\})/, /^(?:[0-9]+)/, /^(?:===)/, /^(?:!==)/, /^(?:\()/, /^(?:\))/, /^(?:\.)/, /^(?:,)/, /^(?:\+|\-|\*|\/|==|>=|<=|>|<|!=|&&|\|\|)/, /^(?:\||\~|\:|\?|\=)/, /^(?:!)/, /^(?:$)/],
            conditions: {"INITIAL": {"rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], "inclusive": true}}
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }

    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();



if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function () {
        return parser.parse.apply(parser, arguments);
    };
    exports.run = exports.parse;
}